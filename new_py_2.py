# from langchain_ollama import ChatOllama
# from langchain_experimental.agents import create_csv_agent
# import pandas as pd
# from langchain_openai import ChatOpenAI
# from dotenv import load_dotenv
# import os
# load_dotenv()

# OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# llm = ChatOpenAI(model = "gpt-4o-mini")
# model = ChatOllama(model = "llama3.2")

# df = pd.read_csv("fake_messages_dataset.csv")
# agent = create_csv_agent(llm,"fake_messages_dataset.csv", verbose = True, allow_dangerous_code=True, handle_parsing_errors=True)

# answer = agent.invoke({"input": "what is the count of total messages"})

# print(answer)



# from langchain_ollama import ChatOllama
# from langchain_experimental.tools.python.tool import PythonAstREPLTool

# import pandas as pd

# # Load model and dataset
# llm = ChatOllama(model="llama3.2")
# df = pd.read_csv("fake_messages_dataset.csv")
# df.columns = df.columns.str.strip().str.lower()

# # Create REPL tool with access to the DataFrame
# tool = PythonAstREPLTool(globals={"df": df})

# # User can ask anything
# user_query = input("Ask a question about the data: ")

# # Prompt to guide the LLM
# prompt = f"""
# You are a Python data analyst. A pandas DataFrame named `df` is already loaded.

# User asked: {user_query}


# Write Python code to answer the question using lowercase column names and data with exact string matches.
# Return only Python code without explanation.
# Only return valid Python code without any extra explanation or markdown. No print statements.

# Do not assume the user is a programmer.
# """

# # Get code from LLM
# response = llm.invoke(prompt)
# code_text = response.content if hasattr(response, "content") else str(response)

# # Clean code if LLM adds markdown backticks (```python ... ```)
# code_cleaned = (
#     code_text.strip()
#     .removeprefix("```python")
#     .removesuffix("```")
#     .strip()
# )

# print("\nðŸ§  Code generated by LLM:\n", code_cleaned)

# # Run the generated code using PythonREPLTool
# execution_result = tool.invoke(code_cleaned)

# print("\nâœ… Execution Result:\n", execution_result)


import pandas as pd
from langchain_ollama import ChatOllama
from langchain_experimental.tools.python.tool import PythonAstREPLTool

# === Load & Normalize Data ===
df = pd.read_csv("fake_messages_dataset.csv")

# Normalize column names and key text columns
df.columns = df.columns.str.strip().str.lower()
# if "sentiment" in df.columns:
#     df["sentiment"] = df["sentiment"].astype(str).str.strip().str.lower()

# Show user what columns are available
print("Data loaded. Columns:", list(df.columns))
print("Ask me anything about your data (type 'exit' to quit)\n")

# === LLM and Tool Setup ===
llm = ChatOllama(model="llama3.2")
tool = PythonAstREPLTool(globals={"df": df})

# === Chatbot Loop ===
while True:
    user_query = input("You: ").strip()
    if user_query.lower() in ["exit", "quit"]:
        print("Bye!")
        break

    # Build dynamic, safe, guiding prompt
    prompt = f"""
You are a Python data analyst. A pandas DataFrame named `df` is already loaded.

User asked: {user_query}

The DataFrame has these columns: {list(df.columns)}

If filtering by sentiment, use exact lowercase values (e.g., 'positive', 'negative').
Write valid Python code using exact column names and values from the DataFrame.
Do not explain or wrap with markdown. Just return raw Python code.
    """

    # Get response from model
    response = llm.invoke(prompt)
    code_text = response.content if hasattr(response, "content") else str(response)

    # Clean the code from any markdown
    code_clean = (
        code_text.strip()
        .removeprefix("```python")
        .removesuffix("```")
        .strip()
    )

    print("Generated Code:\n", code_clean)

    # Try executing the code
    try:
        result = tool.invoke(code_clean)
        print("Result:\n", result)
    except Exception as e:
        print("Error running code:", e)

    print("\n-------------------------------\n")

